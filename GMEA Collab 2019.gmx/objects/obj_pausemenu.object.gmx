<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker_event</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The pause menu
/*for (var i=0; i&lt;8; i++) {

    temp_h[i] = background_hspeed[i];
    temp_v[i] = background_vspeed[i];
    background_hspeed[i] = 0;
    background_vspeed[i] = 0;
}*/

//Cursor
cursormove = 0;

//Play a sound and stop some sounds
audio_play_sound(snd_pause,false,0);
audio_stop_sound(snd_pmeter);
audio_stop_sound(snd_skid);

//Yoshubs Menu stuff.
usize = shader_get_uniform(shd_gaussian,"size");
info = -1;

//Create a screenshot
back = background_create_from_surface(application_surface,0,0,room_width,room_height,0,0);

for (var i=0; i&lt;8; i++) {

    temp_h[i] = background_hspeed[i];
    temp_v[i] = background_vspeed[i];
    background_hspeed[i] = 0;
    background_vspeed[i] = 0;
}

//Pause particles
with (obj_rainmaker) event_user(0);

//Deactivate all timelines
timeline_running = 0;

//Deactivate the instances.
alarm[1] = 2;

//Movement
move_ = -67;
slidehoriz = -384;

//Font
font = global.font_message;

//Set the choice as the first.
choice = 0;

//Handle certain actions.
ready = 0;
ready2 = 1;

//Rotation
poop = 0;
rota = 1;
rotat = 0;

//Begin scaling
alarm[0] = 2;

//Handle the Menus
menu[0] = "Continue";

menu[1] = "Exit Level"

if (global.levelbeat == 1)
     menucolor = c_white;
else
     menucolor = c_gray;
     
menu[2] = "Quit Game";

menu_rise[0] = 1;

menu_rise[1] = 1;

menu_rise[2] = 1;

menu_rise[3] = 1;

menu_rotate[0] = 0;
menu_rotate[1] = 0;
menu_rotate[2] = 0;
menu_rotate[3] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate stuff.

//Deactivate everything except this object
instance_deactivate_all(1);

//Activate persistent object
instance_activate_object(obj_persistent);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle the scaling.
if (ready2 == 1) {

    if (image_xscale &lt; 1) {
    
        //Scale menu up
        image_xscale += 0.1;
        image_yscale += 0.1;
        
        //Backgrond alpha
        image_alpha += 0.05;
        
        //Radius
        
        //Repeats the process
        alarm[0] = 1;
    }
    
    else {
    
        image_xscale = 1;
        image_yscale = 1;
        ready = 1;
    }
}

else if (ready2 == 2) {

    if (image_xscale &gt; 0) {
    
        //Scale menu down
        image_xscale -= 0.1;
        image_yscale -= 0.1;
        
        //Backgrond alpha
        image_alpha -= 0.05;
        
        //Radies
        
        //Repeats the process
        alarm[0] = 1;
    }
    
    else {
    
        //Play a sound
        audio_play_sound(snd_pause,false,0)
        
        //Delete the screenshot
        background_delete(back);
            
        //Activate everything
        instance_activate_all();
        
        //Resume movement on all backgrounds
        for (var i=0; i&lt;8; i++) {
        
            background_hspeed[i] = temp_h[i];
            background_vspeed[i] = temp_v[i];
        }
        
        //Resume particles
        with (obj_rainmaker) event_user(0);
        
        //Activate all timelines
        timeline_running = 1;
        
        //Reset the state of the shift key
        keyboard_clear(global.shiftkey);
        
        //Destroy the message box
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles keyboard presses.
//Yeah I just stole it from MWE2
rotat += poop;
if (rota) {

    if (poop &gt; 0.46875) {
    
        poop = 0.46875;
        if (rotat &gt; 3)
            rota = 0;
    }
    else
        poop += 0.03125;
}
else {
    
    if (poop &lt; -0.46875) {
        poop = -0.46875;
        if (rotat &lt; -3)
            rota = 1;
    }
    else
        poop -= 0.03125;       
}

if (ready2 == 1) {
	
	move_ = lerp(move_, 0, 0.25);
	info = lerp(info, 5, 0.25);
	slidehoriz = lerp(slidehoriz, 0, 0.25);
	
} else if (ready2 == 2) {
	
	move_ = lerp(move_, -67, 0.25);
	info = lerp(info, -1, 1);
	slidehoriz = lerp(slidehoriz, 384, 0.25);
}

//Check if the 'Up Key' is pressed.
if (keyboard_check_pressed(global.upkey)) {

    //If the choice is already the first, exit
    if (choice == 0)
    {
		choice = 3;
	}
    
    //Otherwise, move up a choice
    choice -= 1;
    
    //Play a sound
    audio_play_sound(snd_move,false,0);
}

//Check if the 'Down Key' is pressed.
else if (keyboard_check_pressed(global.downkey)) {

    //If the choice is already the last, exit
    if (choice = 2)
    {
		choice = -1;
	}
    
    //Otherwise, move down a choice
    choice += 1;
    
    //Play a sound
    audio_play_sound(snd_move,false,0);
}

//Check if the 'Enter Key' is pressed without alt.
else if (keyboard_check_pressed(global.enterkey)) &amp;&amp; (!keyboard_check(vk_alt)) {

    //Makes the menu ready to be closed.
    if (ready == 1)
        ready2 = 2;
}

if ready2 = 2
&amp;&amp; (info &lt;= 0) {
	
	alarm[0] = 1;
	
}

for(var i = 0; i &lt; 3; i+= 1) {
	if choice = i {
		
		menu_rotate[i] = lerp(menu_rotate[i],rotat,0.25);
		menu_rise[i] = lerp(menu_rise[i], 1.25, 0.25);
		
		if (keyboard_check_pressed(global.shiftkey)) {
			switch(choice) {
				
				case(0): 
				
				//Makes the menu ready to be closed.
				if (ready == 1)
				    ready2 = 2;
				
				break;
				case(1):
				
				if (global.levelbeat == 1) {
                
                    //Activate all deactivated instances
                    instance_activate_all();
                    
                    //Perform dead event
                global.died = true;
                    
                //Stop Music
                audio_stop_all();
                    
                //Play a sound
                audio_play_sound(snd_correct,false,0);
                    
                //Return to the map
                endlevel();
                    
                //Exit
                exit;
                }
                else {
                
                audio_play_sound(snd_wrong,false,0)
                exit;
                }
				
				break;
				case(2):
				
    audio_play_sound(snd_correct,false,0)
    game_end();
    exit;
				
				break;
			}
		}
		
	} else {
		
		menu_rotate[i] = lerp(menu_rotate[i], 0, 0.25);
		menu_rise[i] = lerp(menu_rise[i], 1, 0.25);
	}
}

	cursormove = lerp(cursormove, (choice*32)+32, 0.25);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the menu.
//view_xview[0]
shader_set(shd_gaussian);
shader_set_uniform_f(usize, view_wview[0], view_hview[0], info) //width,height,radius

//Set the colour
draw_set_colour(c_white);

//Draw the background
if (background_exists(back)) {
    
    //Disable alpha blending.
    draw_enable_alphablend(0);
    
    //Draw the screenshot
    draw_background(back, view_xview[0], view_yview[0]);
    
    //Enable alpha blending.
    draw_enable_alphablend(1);
}

//Reset shader
shader_reset();

draw_set_alpha(image_alpha);

draw_sprite(spr_p_1,0,view_xview[0],view_yview[0]+216-move_);

draw_sprite_ext(spr_p_1,0,view_xview[0]+384,view_yview[0]+move_,-1,-1,0,c_white,1);

draw_set_halign(fa_center);

draw_set_font(global.font_interface);

draw_text(view_xview[0]+(384/2),view_yview[0]+move_+(6),string(global.world) + string(global.levelnumb) + ": " + string(global.levelname));

draw_text_transformed(view_xview[0]+(384/2)+slidehoriz,view_yview[0]+(30)+32,menu[0],menu_rise[0],menu_rise[0],menu_rotate[0]);

draw_text_transformed_color(view_xview[0]+(384/2)+slidehoriz,view_yview[0]+(30)+32+32,menu[1],menu_rise[1],menu_rise[1],menu_rotate[1],menucolor,menucolor,menucolor,menucolor,image_alpha);

draw_text_transformed(view_xview[0]+(384/2)+slidehoriz,view_yview[0]+(30)+32+32+32,menu[2],menu_rise[2],menu_rise[2],menu_rotate[2]);

draw_sprite(spr_cursor,-1,view_xview[0]+(384/3)+slidehoriz,view_yview[0]+(cursormove+30));

draw_set_alpha(1);

draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
